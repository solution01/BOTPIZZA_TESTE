import type { BaseChatModel } from '@langchain/core/language_models/chat_models';
import type { BaseMessage } from '@langchain/core/messages';
import { type INodeTypeDescription } from 'n8n-workflow';
import { z } from 'zod';
declare const planNodeSchema: z.ZodObject<{
    nodeType: z.ZodString;
    nodeName: z.ZodString;
    reasoning: z.ZodString;
}, "strip", z.ZodTypeAny, {
    nodeType: string;
    reasoning: string;
    nodeName: string;
}, {
    nodeType: string;
    reasoning: string;
    nodeName: string;
}>;
declare const workflowPlanSchema: z.ZodObject<{
    intro: z.ZodString;
    plan: z.ZodArray<z.ZodObject<{
        nodeType: z.ZodString;
        nodeName: z.ZodString;
        reasoning: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        nodeType: string;
        reasoning: string;
        nodeName: string;
    }, {
        nodeType: string;
        reasoning: string;
        nodeName: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    intro: string;
    plan: {
        nodeType: string;
        reasoning: string;
        nodeName: string;
    }[];
}, {
    intro: string;
    plan: {
        nodeType: string;
        reasoning: string;
        nodeName: string;
    }[];
}>;
export type WorkflowPlanNode = z.infer<typeof planNodeSchema>;
export type WorkflowPlan = z.infer<typeof workflowPlanSchema>;
export declare function createWorkflowPlannerAgent(llm: BaseChatModel, nodeTypes: INodeTypeDescription[]): {
    plan(userRequest: string, previousPlan?: WorkflowPlan, feedback?: string): Promise<{
        plan: WorkflowPlan;
        toolMessages: BaseMessage[];
    } | {
        text: string;
    }>;
};
export {};
