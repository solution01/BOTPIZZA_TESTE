import type { Logger } from '@n8n/backend-common';
import { type INodeTypeDescription } from 'n8n-workflow';
import { z } from 'zod';
export declare const nodeConnectionSchema: z.ZodObject<{
    sourceNodeId: z.ZodString;
    targetNodeId: z.ZodString;
    sourceOutputIndex: z.ZodOptional<z.ZodNumber>;
    targetInputIndex: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    sourceNodeId: string;
    targetNodeId: string;
    sourceOutputIndex?: number | undefined;
    targetInputIndex?: number | undefined;
}, {
    sourceNodeId: string;
    targetNodeId: string;
    sourceOutputIndex?: number | undefined;
    targetInputIndex?: number | undefined;
}>;
export declare function createConnectNodesTool(nodeTypes: INodeTypeDescription[], logger?: Logger): import("@langchain/core/tools").DynamicStructuredTool<z.ZodObject<{
    sourceNodeId: z.ZodString;
    targetNodeId: z.ZodString;
    sourceOutputIndex: z.ZodOptional<z.ZodNumber>;
    targetInputIndex: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    sourceNodeId: string;
    targetNodeId: string;
    sourceOutputIndex?: number | undefined;
    targetInputIndex?: number | undefined;
}, {
    sourceNodeId: string;
    targetNodeId: string;
    sourceOutputIndex?: number | undefined;
    targetInputIndex?: number | undefined;
}>, {
    sourceNodeId: string;
    targetNodeId: string;
    sourceOutputIndex?: number | undefined;
    targetInputIndex?: number | undefined;
}, {
    sourceNodeId: string;
    targetNodeId: string;
    sourceOutputIndex?: number | undefined;
    targetInputIndex?: number | undefined;
}, import("@langchain/langgraph").Command<unknown>>;
