import { z } from 'zod';
import { Z } from 'zod-class';
declare const FilterConditionSchema: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"neq">, z.ZodLiteral<"like">, z.ZodLiteral<"ilike">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">]>;
export type ListDataStoreContentFilterConditionType = z.infer<typeof FilterConditionSchema>;
export type ListDataStoreContentFilter = z.infer<typeof filterSchema>;
declare const filterSchema: z.ZodObject<{
    type: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"and">, z.ZodLiteral<"or">]>>;
    filters: z.ZodDefault<z.ZodArray<z.ZodObject<{
        columnName: z.ZodString;
        condition: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"neq">, z.ZodLiteral<"like">, z.ZodLiteral<"ilike">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">]>>;
        value: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodDate, z.ZodNull]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | Date | null;
        columnName: string;
        condition: "eq" | "neq" | "like" | "ilike" | "gt" | "gte" | "lt" | "lte";
    }, {
        value: string | number | boolean | Date | null;
        columnName: string;
        condition?: "eq" | "neq" | "like" | "ilike" | "gt" | "gte" | "lt" | "lte" | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    type: "or" | "and";
    filters: {
        value: string | number | boolean | Date | null;
        columnName: string;
        condition: "eq" | "neq" | "like" | "ilike" | "gt" | "gte" | "lt" | "lte";
    }[];
}, {
    type?: "or" | "and" | undefined;
    filters?: {
        value: string | number | boolean | Date | null;
        columnName: string;
        condition?: "eq" | "neq" | "like" | "ilike" | "gt" | "gte" | "lt" | "lte" | undefined;
    }[] | undefined;
}>;
declare const ListDataStoreContentQueryDto_base: Z.Class<{
    take: z.ZodOptional<z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodString>, number, string | undefined>, number, string | undefined>, number, string | undefined>, number, string | undefined>>;
    skip: z.ZodOptional<z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodString>, number, string | undefined>, number, string | undefined>, number, string | undefined>>;
    filter: z.ZodOptional<z.ZodEffects<z.ZodOptional<z.ZodString>, {
        type: "or" | "and";
        filters: {
            value: string | number | boolean | Date | null;
            columnName: string;
            condition: "eq" | "neq" | "like" | "ilike" | "gt" | "gte" | "lt" | "lte";
        }[];
    } | undefined, string | undefined>>;
    sortBy: z.ZodOptional<z.ZodEffects<z.ZodOptional<z.ZodString>, readonly [string, "ASC" | "DESC"] | undefined, string | undefined>>;
}>;
export declare class ListDataStoreContentQueryDto extends ListDataStoreContentQueryDto_base {
}
export {};
