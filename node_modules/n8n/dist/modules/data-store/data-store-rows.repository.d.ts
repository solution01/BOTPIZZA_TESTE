import type { ListDataStoreContentQueryDto, UpsertDataStoreRowsDto } from '@n8n/api-types';
import { GlobalConfig } from '@n8n/config';
import { DataSource, DataSourceOptions, QueryRunner } from '@n8n/typeorm';
import { DataStoreColumnJsType, DataStoreRows, DataStoreRowWithId } from 'n8n-workflow';
import { DataStoreColumn } from './data-store-column.entity';
import { DataStoreUserTableName } from './data-store.types';
export declare class DataStoreRowsRepository {
    private dataSource;
    private readonly globalConfig;
    constructor(dataSource: DataSource, globalConfig: GlobalConfig);
    toTableName(dataStoreId: string): DataStoreUserTableName;
    insertRows(dataStoreId: string, rows: DataStoreRows, columns: DataStoreColumn[], returnData?: boolean): Promise<DataStoreRowWithId[]>;
    upsertRows(dataStoreId: string, dto: UpsertDataStoreRowsDto, columns: DataStoreColumn[]): Promise<boolean>;
    updateRow(dataStoreId: string, setData: Record<string, DataStoreColumnJsType | null>, whereData: Record<string, DataStoreColumnJsType | null>, columns: DataStoreColumn[]): Promise<void>;
    deleteRows(dataStoreId: string, ids: number[]): Promise<boolean>;
    createTableWithColumns(dataStoreId: string, columns: DataStoreColumn[], queryRunner: QueryRunner): Promise<void>;
    dropTable(dataStoreId: string, queryRunner: QueryRunner): Promise<void>;
    addColumn(dataStoreId: string, column: DataStoreColumn, queryRunner: QueryRunner, dbType: DataSourceOptions['type']): Promise<void>;
    dropColumnFromTable(dataStoreId: string, columnName: string, queryRunner: QueryRunner, dbType: DataSourceOptions['type']): Promise<void>;
    getManyAndCount(dataStoreId: string, dto: ListDataStoreContentQueryDto): Promise<{
        count: number;
        data: DataStoreRows;
    }>;
    getRowIds(dataStoreId: string, dto: ListDataStoreContentQueryDto): Promise<number[]>;
    private getManyQuery;
    private applyFilters;
    private applySorting;
    private applySortingByField;
    private applyPagination;
    private fetchAndSplitRowsByExistence;
}
