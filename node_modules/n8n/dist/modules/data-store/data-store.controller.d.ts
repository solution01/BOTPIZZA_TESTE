import { AddDataStoreRowsDto, AddDataStoreColumnDto, CreateDataStoreDto, DeleteDataStoreRowsQueryDto, ListDataStoreContentQueryDto, ListDataStoreQueryDto, MoveDataStoreColumnDto, UpdateDataStoreDto, UpdateDataStoreRowDto, UpsertDataStoreRowsDto } from '@n8n/api-types';
import { AuthenticatedRequest } from '@n8n/db';
import { DataStoreService } from './data-store.service';
export declare class DataStoreController {
    private readonly dataStoreService;
    constructor(dataStoreService: DataStoreService);
    createDataStore(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dto: CreateDataStoreDto): Promise<import("./data-store.entity").DataStore>;
    listProjectDataStores(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, payload: ListDataStoreQueryDto): Promise<{
        count: number;
        data: import("./data-store.entity").DataStore[];
    }>;
    updateDataStore(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataStoreId: string, dto: UpdateDataStoreDto): Promise<boolean>;
    deleteDataStore(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataStoreId: string): Promise<boolean>;
    getColumns(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataStoreId: string): Promise<import("./data-store-column.entity").DataStoreColumn[]>;
    addColumn(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataStoreId: string, dto: AddDataStoreColumnDto): Promise<import("./data-store-column.entity").DataStoreColumn>;
    deleteColumn(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataStoreId: string, columnId: string): Promise<boolean>;
    moveColumn(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataStoreId: string, columnId: string, dto: MoveDataStoreColumnDto): Promise<boolean>;
    getDataStoreRows(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataStoreId: string, dto: ListDataStoreContentQueryDto): Promise<{
        count: number;
        data: {
            [x: string]: import("n8n-workflow").DataStoreColumnJsType | null;
        }[];
    }>;
    appendDataStoreRows(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataStoreId: string, dto: AddDataStoreRowsDto): Promise<import("n8n-workflow").DataStoreRowWithId[]>;
    upsertDataStoreRows(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataStoreId: string, dto: UpsertDataStoreRowsDto): Promise<boolean>;
    updateDataStoreRow(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataStoreId: string, dto: UpdateDataStoreRowDto): Promise<boolean>;
    deleteDataStoreRows(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataStoreId: string, dto: DeleteDataStoreRowsQueryDto): Promise<boolean>;
}
