import { type DataStoreCreateColumnSchema, type DataStoreColumn } from '@n8n/api-types';
import { DslColumn } from '@n8n/db';
import type { DataSourceOptions } from '@n8n/typeorm';
import type { DataStoreColumnJsType, DataStoreRows, DataStoreRowWithId } from 'n8n-workflow';
import type { DataStoreUserTableName } from '../data-store.types';
export declare function toDslColumns(columns: DataStoreCreateColumnSchema[]): DslColumn[];
export declare function addColumnQuery(tableName: DataStoreUserTableName, column: DataStoreCreateColumnSchema, dbType: DataSourceOptions['type']): string;
export declare function deleteColumnQuery(tableName: DataStoreUserTableName, column: string, dbType: DataSourceOptions['type']): string;
export declare function splitRowsByExistence(existing: Array<Record<string, unknown>>, matchFields: string[], rows: DataStoreRows): {
    rowsToInsert: DataStoreRows;
    rowsToUpdate: DataStoreRows;
};
export declare function quoteIdentifier(name: string, dbType: DataSourceOptions['type']): string;
export declare function extractReturningData(raw: unknown): DataStoreRowWithId[];
export declare function extractInsertedIds(raw: unknown, dbType: DataSourceOptions['type']): number[];
export declare function normalizeRows(rows: DataStoreRows, columns: DataStoreColumn[]): {
    [x: string]: DataStoreColumnJsType | null;
}[];
export declare function normalizeValue(value: DataStoreColumnJsType | null, columnType: string | undefined, dbType: DataSourceOptions['type']): DataStoreColumnJsType | null;
export declare function getPlaceholder(index: number, dbType: DataSourceOptions['type']): string;
export declare function buildColumnTypeMap(columns: Array<{
    name: string;
    type: string;
}>): Record<string, string>;
