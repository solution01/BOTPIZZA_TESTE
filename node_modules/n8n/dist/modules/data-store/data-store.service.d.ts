import type { AddDataStoreColumnDto, CreateDataStoreDto, ListDataStoreContentQueryDto, MoveDataStoreColumnDto, DataStoreListOptions, UpsertDataStoreRowsDto, UpdateDataStoreDto, UpdateDataStoreRowDto } from '@n8n/api-types';
import { Logger } from '@n8n/backend-common';
import type { DataStoreRows } from 'n8n-workflow';
import { DataStoreColumnRepository } from './data-store-column.repository';
import { DataStoreRowsRepository } from './data-store-rows.repository';
import { DataStoreRepository } from './data-store.repository';
export declare class DataStoreService {
    private readonly dataStoreRepository;
    private readonly dataStoreColumnRepository;
    private readonly dataStoreRowsRepository;
    private readonly logger;
    constructor(dataStoreRepository: DataStoreRepository, dataStoreColumnRepository: DataStoreColumnRepository, dataStoreRowsRepository: DataStoreRowsRepository, logger: Logger);
    start(): Promise<void>;
    shutdown(): Promise<void>;
    createDataStore(projectId: string, dto: CreateDataStoreDto): Promise<import("./data-store.entity").DataStore>;
    updateDataStore(dataStoreId: string, projectId: string, dto: UpdateDataStoreDto): Promise<boolean>;
    deleteDataStoreByProjectId(projectId: string): Promise<boolean>;
    deleteDataStoreAll(): Promise<boolean>;
    deleteDataStore(dataStoreId: string, projectId: string): Promise<boolean>;
    addColumn(dataStoreId: string, projectId: string, dto: AddDataStoreColumnDto): Promise<import("./data-store-column.entity").DataStoreColumn>;
    moveColumn(dataStoreId: string, projectId: string, columnId: string, dto: MoveDataStoreColumnDto): Promise<boolean>;
    deleteColumn(dataStoreId: string, projectId: string, columnId: string): Promise<boolean>;
    getManyAndCount(options: DataStoreListOptions): Promise<{
        count: number;
        data: import("./data-store.entity").DataStore[];
    }>;
    getManyRowsAndCount(dataStoreId: string, projectId: string, dto: ListDataStoreContentQueryDto): Promise<{
        count: number;
        data: {
            [x: string]: import("n8n-workflow").DataStoreColumnJsType | null;
        }[];
    }>;
    getColumns(dataStoreId: string, projectId: string): Promise<import("./data-store-column.entity").DataStoreColumn[]>;
    insertRows(dataStoreId: string, projectId: string, rows: DataStoreRows, returnData?: boolean): Promise<import("n8n-workflow").DataStoreRowWithId[]>;
    upsertRows(dataStoreId: string, projectId: string, dto: UpsertDataStoreRowsDto): Promise<boolean>;
    updateRow(dataStoreId: string, projectId: string, dto: UpdateDataStoreRowDto): Promise<boolean>;
    deleteRows(dataStoreId: string, projectId: string, ids: number[]): Promise<boolean>;
    private validateRowsWithColumns;
    private validateRows;
    private validateCell;
    private validateDataStoreExists;
    private validateColumnExists;
    private validateUniqueName;
}
